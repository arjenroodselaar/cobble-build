#!/usr/bin/env python3

"""This is the command-line entry point to Cobble, which parses arguments and
orchestrates actions within the library.
"""

import argparse
import itertools
import os
import shutil
import subprocess
import sys
import traceback
import re

def _compat_add_subparser(parser, title, dest):
    """Python made an incompatible change to how subparsers work between 3.6
    and 3.7. In 3.7, you must pass the 'required' argument, or the default help
    message will suck. In 3.6, this argument is rejected as illegal. Wheeeeee.

    This function provides a compatibility shim.
    """
    if sys.version_info >= (3,7):
        return parser.add_subparsers(title = title, dest = dest, required = True)
    else:
        return parser.add_subparsers(title = title, dest = dest)

def make_argument_parser(plugin_command_parser_generators):
    """Defines the grammar for command-line arguments."""

    parser = argparse.ArgumentParser()
    subparsers = _compat_add_subparser(parser, title = 'command', dest = 'command')

    init_parser = subparsers.add_parser('init',
            help = 'initialize a build directory')
    init_parser.add_argument('project',
            help = 'path to project root (containing BUILD.conf)')
    init_parser.add_argument('--reinit',
            help = 'allow overwriting build.ninja (default: no)',
            action = 'store_true')
    init_parser.add_argument('--dump-environments',
            help = 'record contents of environments in Ninja file (default: no)',
            action = 'store_true')
    init_parser.set_defaults(go = init_build_dir)

    list_parser = subparsers.add_parser('list',
            help = 'list available build targets')
    list_parser.add_argument('-v', '--verbose',
            help = "verbose output: print all targets, not just the symlinks",
            action = 'store_true',
            dest = 'verbose')
    list_parser.set_defaults(go = list_targets)

    build_parser = subparsers.add_parser('build',
            help = 'run the build, regenerating files if needed')
    build_parser.add_argument('-j', '--jobs',
            help = 'run N jobs in parallel',
            type = int,
            metavar = 'N',
            dest = 'jobs')
    build_parser.add_argument('-l', '--loadavg',
            help = "don't start new jobs if loadavg > N",
            type = float,
            metavar = 'N',
            dest = 'loadavg')
    build_parser.add_argument('-n', '--dry-run',
            help = "dry run (don't run commands)",
            action = 'store_true',
            dest = 'dry_run')
    build_parser.add_argument('-v', '--verbose',
            help = "verbose output: print command lines while building",
            action = 'store_true',
            dest = 'verbose')
    build_parser.add_argument('--explain',
            help = "have Ninja explain why commands are being run",
            action = 'store_true')
    build_parser.add_argument('--stats',
            help = "print Ninja internal stats at end of build",
            action = 'store_true')
    build_parser.add_argument('targets',
            nargs = '*',
            help = "names of targets to build; if omitted, build all")
    build_parser.set_defaults(go = build)

    run_parser = subparsers.add_parser('run',
            help = 'build and run concrete targets')
    run_parser.add_argument('-j', '--jobs',
            help = 'run N build jobs in parallel',
            type = int,
            metavar = 'N',
            dest = 'jobs')
    run_parser.add_argument('-l', '--loadavg',
            help = "don't start new build jobs if loadavg > N",
            type = float,
            metavar = 'N',
            dest = 'loadavg')
    run_parser.add_argument('-v', '--verbose',
            help = "verbose output: print command lines while building and running",
            action = 'store_true',
            dest = 'verbose')
    run_parser.add_argument('-n', '--dry-run',
            help = "dry run (don't run commands)",
            action = 'store_true',
            dest = 'dry_run')
    run_parser.add_argument('-c', '--as-command',
            help = "interpret optional run arguments as command",
            action = 'store_true',
            dest = 'args_as_cmd')
    run_parser.add_argument('-s', '--single',
            help = "if -c given, pass all build results as arguments to a single invocation of the command",
            action = 'store_true',
            dest = 'single_invoke')
    run_parser.add_argument('targets_and_args',
            nargs = argparse.PARSER,
            help = "list of targets and run arguments separated by the '--' psuedo-argument")
    run_parser.set_defaults(go = run)

    clean_parser = subparsers.add_parser('clean',
            help = 'clean up build artifacts')
    clean_parser.add_argument('-v', '--verbose',
            help = "verbose output: print what is about to be cleaned",
            action = 'store_true',
            dest = 'verbose')
    clean_parser.add_argument('-n', '--dry-run',
            help = "dry run (don't actually remove files)",
            action = 'store_true',
            dest = 'dry_run')
    clean_parser.add_argument('--squeaky',
            help = "remove all project files, leaving the build dir squeaky clean",
            action = 'store_true')
    clean_parser.add_argument('projects',
            nargs = '*',
            help = 'list of (sub)projects to clean')
    clean_parser.set_defaults(go = clean)

    # Add parsers provided by plugins.
    for add_plugin_cmd_parser in plugin_command_parser_generators:
        add_plugin_cmd_parser(subparsers)

    return parser

def init_build_dir(_, args):
    """Implementation of the `init` subcommand."""

    if os.path.samefile(args.project, '.'):
        print("I won't use your project directory as build directory.",
                file = sys.stderr)
        sys.exit(1)

    if not os.path.isdir(args.project):
        print('Project dir missing or invalid: %s' % args.project,
                file = sys.stderr)
        sys.exit(1)

    if os.path.exists('build.ninja') and not args.reinit:
        print("I won't overwrite build.ninja (use --reinit to force)",
                file = sys.stderr)
        sys.exit(1)

    # Actual work

    script_path = args.script_path
    # Follow links to find where this *actually* lives.
    # As of this writing, os.path.realpath is broken.
    while os.path.islink(script_path):
        link = os.readlink(script_path)
        if os.path.isabs(link):
            script_path = link
        else:
            script_path = os.path.join(os.path.dirname(script_path), link)

    script_path = os.path.relpath(script_path, '.')

    # Create a symlink in the build directory to our true location.
    if os.path.exists('./cobble'):
        if os.path.islink('./cobble'):
            # We'll assume it's ours to mess with...
            os.remove('./cobble')
        else:
            raise Exception("can't create cobble symlink in build dir: file exists")

    os.symlink(script_path, './cobble')

    # Build the graph...
    try:
        project, _ = cobble.loader.load(args.project, '.')
    except cobble.loader.BuildError as e:
        cobble.loader.print_build_error(e)
        return 1

    # ...and blow it out.
    try:
        cobble.output.write_ninja_files(project,
                dump_environments = args.dump_environments)
    except cobble.target.EvaluationError as e:
        cobble.target.print_evaluation_error(e)
        return 1

    return 0

def list_targets(project, args):
    """Implementation of the `list` subcommand."""

    # The following is a somewhat crude method of gathering all concrete
    # outputs, but it seems to work. We may need to beef this up with something
    # that resembles what is done in output.py.
    products = set([])
    try:
        for target in project.concrete_targets():
            _, product_map = target.evaluate(None)
            for product in product_map.values():
                products.update(product)
    except cobble.target.EvaluationError as e:
        cobble.target.print_evaluation_error(e)
        return 1

    symlinks = []
    outputs = []
    for product in products:
        symlinks.extend([
            # Normalize the paths, primarily to strip the leading ./
            (os.path.normpath(link), os.path.normpath(source))
            for (link, source) in product.symlinks()])

        if args.verbose:
            outputs.extend(
                map(os.path.normpath,
                    product.exposed_outputs().values()))

    if args.verbose:
        outputs.sort()
        for output in outputs:
            print(output)

    symlinks.sort()
    for symlink in symlinks:
        if args.verbose:
            print("%s -> %s" % symlink)
        else:
            link, _ = symlink
            print(link)

    return 0

def build(project, args):
    """Implementation of the `build` subcommand."""
    try:
        cobble.cmd.build_targets_or_query_results(project, args.targets, args)
        return 0
    except cobble.target.EvaluationError as e:
        cobble.target.print_evaluation_error(e)
        return 1
    except subprocess.CalledProcessError:
        return 1

def run(project, args):
    """Implementation of the `run` subcommand."""

    # args.targets_and_args is a combined list of positinal arguments, separated
    # by the '--' pseudo-argument. Split these into two separate lists so they
    # can be used appropriately.
    targets_and_args = [
        list(y)
        for x, y
        in itertools.groupby(
                args.targets_and_args,
                lambda z: z == '--') if not x
    ]
    targets = targets_and_args[0]
    run_args = list(itertools.chain(*targets_and_args[1:]))

    try:
        outputs = cobble.cmd.build_targets_or_query_results(
            project,
            targets,
            args)
    except cobble.target.EvaluationError as e:
        cobble.target.print_evaluation_error(e)
        return 1
    except subprocess.CalledProcessError:
        return 1

    def run_in_shell(cmd, dry_run=False):
        cmd_str = ' '.join(cmd)
        if args.verbose:
            print("Running", cmd_str)
        if not dry_run:
            subprocess.check_call(cmd_str, shell = True)

    def substitute_out(s, sub):
        return sub if s == '$OUT' else s

    try:
        if args.args_as_cmd:
            # Treat the remaining arguments as the command and pass the
            # outputs as the argument instead.
            cmd = run_args
            substitute_out_variable = ('$OUT' in cmd)

            if args.single_invoke:
                # Pass all outputs in a single command invocation,
                # subsituting any $OUT strings with the output.
                if substitute_out_variable:
                    outputs_str = ' '.join(outputs)
                    run_in_shell(
                        map(substitute_out, cmd),
                        dry_run=args.dry_run)
                else:
                    run_in_shell(
                        cmd + outputs,
                        dry_run=args.dry_run)
            else:
                # Invoke the given command for each output, substituting
                # any $OUT strings with the output.
                for output in outputs:
                    if substitute_out_variable:
                        run_in_shell(
                            map(substitute_out, cmd),
                            dry_run=args.dry_run)
                    else:
                        run_in_shell(
                            cmd + [output],
                            dry_run=args.dry_run)
        else:
            for output in outputs:
                run_in_shell(
                    [output] + run_args,
                    dry_run=args.dry_run)
    except subprocess.CalledProcessError:
        return 1

    return 0

_outputs_dirs = ['latest', 'env']
_project_files = ['.ninja_deps', '.ninja_log', 'build.ninja', 'project_path']

def clean(_, args):
    """Implementation of the `clean` subcommand."""

    def rmtree(path):
        nonlocal args

        if args.verbose:
            print(f"Cleaning {path}")
        if not args.dry_run:
            shutil.rmtree(path)

    if len(args.projects) > 0:
        # Clean the specifically requested projects.
        for project in args.projects:
            base = ('.' if project == 'root' else project)

            for d in _outputs_dirs:
                path = os.path.normpath(os.path.join(base, d))

                if os.path.isdir(path):
                    rmtree(path)
    else:
        # Attempt to clean everything that looks like a project output dir.
        for child in os.listdir('.'):
            if os.path.isdir(child):
                if child in _outputs_dirs:
                    rmtree(child)
                else:
                    # See if this dir belongs to a subproject and contains
                    # output dirs.
                    for grandchild in os.listdir(child):
                        path = os.path.normpath(
                            os.path.join(child, grandchild))

                        if grandchild in _outputs_dirs and \
                                os.path.isdir(path):
                            rmtree(path)

    if args.squeaky:
        for path in _project_files:
            if os.path.exists(path):
                if args.verbose:
                    print(f"Cleaning {path}")
                if not args.dry_run:
                    os.remove(path)
        # Remove any empty directories.
        for path in os.listdir('.'):
            if os.path.isdir(path) and len(os.listdir(path)) == 0:
                rmtree(path)

    return 0

def _load_project():
    """Load the Project by using BUILD.conf and subsequent BUILD files.
    Assumes build.ninja exists on disk.
    """
    project_path = None
    project_path_re = re.compile('^#\sproject_path=(.*)$')

    with open('build.ninja') as build_ninja:
        # Try and read the Project path out of the first few lines.
        for line in build_ninja.readlines()[:5]:
            match = project_path_re.match(line)
            if match:
                project_path = match.group(1)

    if project_path:
        if not os.path.exists(project_path):
            print('Path %s found in build.ninja does not exist.' % project_path,
                    file=sys.stderr)
            return (None, [])
        return cobble.loader.load(project_path, '.')

    return (None, [])

def main():
    if os.path.exists('build.ninja'):
        try:
            project, plugin_command_parser_generators = _load_project()
            args = make_argument_parser(plugin_command_parser_generators).parse_args()
            args.script_path = __file__

            return args.go(project, args)
        except cobble.loader.BuildError as e:
            cobble.loader.print_build_error(e)
            return 1
    else:
        args = make_argument_parser([]).parse_args()
        args.script_path = __file__

        # Only the 'init' command is valid if no build.ninja file exists.
        if not (args.command == 'init' or args.command == 'clean'):
            print('No build.ninja file found.', file=sys.stderr)
            print("Help: Initalize the build directory using 'init' command.",
                    file=sys.stderr)
            return 1

        return args.go(None, args)

# Find the directory housing this script.
dist_dir = os.path.dirname(os.path.realpath(__file__))
# Add the `src` and `vnd/toml` subdirs for imports.
sys.path.append(os.path.join(dist_dir, 'src'))
sys.path.append(os.path.join(dist_dir, 'vnd', 'toml'))

# Now that we have the module path right, we can...
import cobble.cmd
import cobble.loader
import cobble.output
import cobble.target
import cobble.project

sys.exit(main())
